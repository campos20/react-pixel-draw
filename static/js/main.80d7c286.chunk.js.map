{"version":3,"sources":["components/pixel.jsx","components/row.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Pixel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomColor","color","i","Math","floor","random","state","cols","size","window","innerWidth","react_default","a","createElement","className","style","backgroundColor","minWidth","minHeight","Component","Row","_this2","Array","from","length","_","pixel","key","Board","getSize","getRows","ceil","innerHeight","rows","setState","updateDimensions","addEventListener","bind","removeEventListener","row","App","board","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAkCeA,cA/Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,eAAiB,WAGf,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,GAXPR,EAAKa,MAAQ,CACXC,KAAMf,EAAMe,MAHGd,wEAiBjB,IAAIe,EAAOC,OAAOC,WAAad,KAAKU,MAAMC,KAC1C,OACEI,EAAAC,EAAAC,cAAA,OACEC,UAAU,QACVC,MAAO,CACLC,gBAAiBpB,KAAKI,iBACtBiB,SAAUT,EACVU,UAAWV,YAzBDW,aCoBLC,cAlBb,SAAAA,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACjB3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KACDc,MAAQ,CACXC,KAAMf,EAAMe,MAHGd,wEAOV,IAAA4B,EAAAzB,KACP,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZQ,MAAMC,KAAK,CAAEC,OAAQ5B,KAAKU,MAAMC,MAAQ,SAACkB,EAAGvB,GAC3C,OAAOS,EAAAC,EAAAC,cAACa,EAAD,CAAOC,IAAKzB,EAAGK,KAAMc,EAAKf,MAAMC,iBAZ/BY,aC8CHS,cA7Cb,SAAAA,EAAYpC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACjBnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KAORqC,QAAU,SAAAtB,GACR,OAAOE,OAAOC,WAAaH,GATVd,EAYnBqC,QAAU,SAAAvB,GACR,OAAOJ,KAAK4B,KAAKtB,OAAOuB,YAAcvC,EAAKoC,QAAQtB,KAblCd,EAiCnBa,MAAQ,GA/BNb,EAAKa,MAAQ,CACXC,KAAMf,EAAMe,KACZ0B,KAAMxC,EAAKqC,QAAQtC,EAAMe,OAJVd,kFAiBjB,IAAIwC,EAAOrC,KAAKkC,QAAQlC,KAAKU,MAAMC,MACnCX,KAAKsC,SAAS,CACZ3B,KAAMX,KAAKU,MAAMC,KACjB0B,KAAMA,gDAKRrC,KAAKuC,mBACL1B,OAAO2B,iBAAiB,SAAUxC,KAAKuC,iBAAiBE,KAAKzC,sDAI7Da,OAAO6B,oBAAoB,SAAU1C,KAAKuC,iBAAiBE,KAAKzC,wCAIzD,IAAAyB,EAAAzB,KACP,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZQ,MAAMC,KAAK,CAAEC,OAAQ5B,KAAKU,MAAM2B,MAAQ,SAACR,EAAGvB,GAC3C,OAAOS,EAAAC,EAAAC,cAAC0B,EAAD,CAAKZ,IAAKzB,EAAGK,KAAMc,EAAKf,MAAMC,iBAvC3BY,aCULqB,MATf,WAEE,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAOlC,KAHA,OCOOmC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80d7c286.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Pixel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols\n    };\n  }\n\n  getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  render() {\n    let size = window.innerWidth / this.state.cols;\n    return (\n      <div\n        className=\"pixel\"\n        style={{\n          backgroundColor: this.getRandomColor(),\n          minWidth: size,\n          minHeight: size\n        }}\n      />\n    );\n  }\n}\n\nexport default Pixel;\n","import React, { Component } from \"react\";\nimport Pixel from \"./pixel\";\n\nclass Row extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        {Array.from({ length: this.state.cols }, (_, i) => {\n          return <Pixel key={i} cols={this.state.cols} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Row;\n","import React, { Component } from \"react\";\nimport Row from \"./row\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols,\n      rows: this.getRows(props.cols)\n    };\n  }\n\n  getSize = cols => {\n    return window.innerWidth / cols;\n  };\n\n  getRows = cols => {\n    return Math.ceil(window.innerHeight / this.getSize(cols));\n  };\n\n  updateDimensions() {\n    var rows = this.getRows(this.state.cols);\n    this.setState({\n      cols: this.state.cols,\n      rows: rows\n    });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  state = {};\n  render() {\n    return (\n      <div className=\"board\">\n        {Array.from({ length: this.state.rows }, (_, i) => {\n          return <Row key={i} cols={this.state.cols} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board\";\n\nfunction App() {\n  var cols = 30;\n  return (\n    <div className=\"App\">\n      <Board cols={cols} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}